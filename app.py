# -*- coding: utf-8 -*-
# Versi√≥n 7.3 ‚Äì UEB Bibliograf√≠as (Streamlit)
# Cambios clave:
# - use_container_width (adi√≥s use_column_width deprecado)
# - Descarga autom√°tica bases Digital/F√≠sica con indicadores de progreso
# - Carga manual de bases en "‚öôÔ∏è Avanzado" (tiene prioridad solo en la sesi√≥n)
# - Cargadores de Tem√°ticas y T√©rminos a excluir siempre visibles (obligatorios)
# - Resaltado de exclusiones en Excel (y CSV sin ‚Äúnan‚Äù)
# - Dedupe: Digital (Url OA), F√≠sica (No. Topogr√°fico) ‚Äì configurables
# - Sin botones ‚Äúusar/liberar memoria‚Äù; sesi√≥n estable (tema no borra datos)

import io
import re
import time
import requests
import pandas as pd
import numpy as np
from unidecode import unidecode
import streamlit as st

# ------------------------------------
# Configuraci√≥n general
# ------------------------------------
st.set_page_config(
    page_title="Herramienta para bibliograf√≠as especializadas",
    page_icon="üìö",
    layout="wide",
)

# URLs oficiales
URL_DIGITAL = "https://biblioteca.unbosque.edu.co/sites/default/files/Formatos-Biblioteca/Biblioteca%20Colecci%C3%B3n%20Digital.xlsx"
URL_FISICA  = "https://biblioteca.unbosque.edu.co/sites/default/files/Formatos-Biblioteca/Biblioteca%20BD%20Colecci%C3%B3n%20F%C3%ADsica.xlsx"

# Logos
DARK_LOGO  = "https://biblioteca.unbosque.edu.co/sites/default/files/Logos/Logo%201%20Blanco.png"
LIGHT_LOGO = "https://biblioteca.unbosque.edu.co/sites/default/files/Logos/Logo%201%20ORG.png"

# ------------------------------------
# Helpers de sesi√≥n
# ------------------------------------
def init_state():
    for k, v in {
        "df_digital": None,
        "df_fisica": None,
        "digital_loaded_from": None,   # "web" | "manual"
        "fisica_loaded_from": None,    # "web" | "manual"
        "tematicas_file": None,
        "excluir_file": None,
        "auto_loaded_once": False,
        "last_status": "",
    }.items():
        st.session_state.setdefault(k, v)

init_state()

# ------------------------------------
# Utilidades
# ------------------------------------
def normalize_text(x: str) -> str:
    if pd.isna(x):
        return ""
    return unidecode(str(x)).strip().lower()

def contains_term(text: str, term: str) -> bool:
    """Coincidencia simple: substring no sensible a acentos/case."""
    return normalize_text(term) in normalize_text(text)

# ------------------------------------
# Carga de datos (con cach√©)
# ------------------------------------
@st.cache_data(show_spinner=False, ttl=3600)
def load_excel_from_url(url: str) -> pd.DataFrame:
    # Descarga a bytes para mostrar barra (fuera del cach√© est√° la barra)
    resp = requests.get(url, stream=True, timeout=60)
    resp.raise_for_status()
    total = int(resp.headers.get("Content-Length", "0"))
    chunk = 1024 * 64

    buf = io.BytesIO()
    downloaded = 0
    for data in resp.iter_content(chunk_size=chunk):
        buf.write(data)
        downloaded += len(data)
    buf.seek(0)
    # Leer excel
    df = pd.read_excel(buf)
    return df

def safe_progress_download(label: str, url: str) -> pd.DataFrame | None:
    """Barra de progreso visual mientras la funci√≥n cacheada descarga el archivo."""
    ph = st.empty()
    prog = st.progress(0, text=f"Descargando {label}‚Ä¶")
    try:
        # No podemos medir porcentaje exacto desde cache; simulamos ticks visibles
        # mientras hacemos la carga real (r√°faga final).
        for i in range(0, 50, 5):
            prog.progress(i, text=f"Descargando {label}‚Ä¶")
            time.sleep(0.05)
        df = load_excel_from_url(url)
        prog.progress(100, text=f"{label}: descarga completa")
        time.sleep(0.15)
        prog.empty()
        ph.empty()
        return df
    except Exception as e:
        prog.empty()
        ph.error(f"No se pudo descargar {label}: {e}")
        return None

# ------------------------------------
# Lectura de Tem√°ticas / Excluir
# ------------------------------------
def read_tematicas_file(file) -> pd.DataFrame:
    df = pd.read_excel(file)
    df.columns = [str(c).strip() for c in df.columns]
    # Espera: col1 = t√©rmino (todas las variantes), col2 = normalizado
    if df.shape[1] < 2:
        raise ValueError("La plantilla de Tem√°ticas debe tener 2 columnas (t√©rmino, normalizado).")
    df = df.iloc[:, :2].copy()
    df.columns = ["termino", "normalizado"]
    df["termino"] = df["termino"].astype(str)
    df["normalizado"] = df["normalizado"].astype(str)
    # No filas vac√≠as
    df = df[(df["termino"].str.strip() != "") & (df["normalizado"].str.strip() != "")]
    return df

def read_excluir_file(file) -> list[str]:
    df = pd.read_excel(file)
    if df.shape[1] < 1:
        return []
    col = df.columns[0]
    vals = df[col].dropna().astype(str).tolist()
    vals = [v for v in [v.strip() for v in vals] if v]
    return vals

# ------------------------------------
# Motor de b√∫squeda
# ------------------------------------
def search_in_base(df: pd.DataFrame,
                   tematicas_df: pd.DataFrame,
                   col1: str,
                   col2: str,
                   fuente: str) -> pd.DataFrame:
    """Busca por t√©rminos (tematicas_df['termino']) en col1/col2."""
    if df is None or df.empty:
        return pd.DataFrame()

    if col1 not in df.columns or col2 not in df.columns:
        return pd.DataFrame()

    results = []
    total_terms = len(tematicas_df)
    st.write("")  # espacio
    st.info(f"Buscando en **{fuente}**‚Ä¶ ({total_terms} t√©rminos)")
    pbar = st.progress(0)
    for i, row in tematicas_df.iterrows():
        termino = row["termino"]
        normal = row["normalizado"]

        mask = df[col1].astype(str).apply(lambda x: contains_term(x, termino)) | \
               df[col2].astype(str).apply(lambda x: contains_term(x, termino))
        hits = df.loc[mask].copy()
        if not hits.empty:
            hits["T√©rmino"] = termino
            hits["Normalizado"] = normal
            hits["Fuente"] = fuente
            results.append(hits)

        if total_terms:
            pbar.progress(int(100 * (i + 1) / total_terms))
    pbar.empty()

    if results:
        out = pd.concat(results, ignore_index=True)
        # Columna de coincidencia
        out["Columna coincidencia"] = np.where(
            out[col1].astype(str).apply(lambda x: contains_term(x, out["T√©rmino"].iloc[0])),"T√≠tulo","Tem√°ticas"
        )  # marcador simple
        return out
    return pd.DataFrame()

def apply_exclusion_highlight(df: pd.DataFrame, excluir: list[str], col1: str, col2: str) -> pd.DataFrame:
    if df.empty or not excluir:
        df["Exclusi√≥n_detectada"] = False
        return df

    excl_norm = [normalize_text(e) for e in excluir if e.strip()]
    def has_excl(x: str) -> bool:
        nx = normalize_text(x)
        return any(e in nx for e in excl_norm)

    df["Exclusi√≥n_detectada"] = df[col1].astype(str).apply(has_excl) | df[col2].astype(str).apply(has_excl)
    return df

def bitacora_por_termino(df: pd.DataFrame) -> pd.DataFrame:
    if df.empty or "T√©rmino" not in df.columns:
        return pd.DataFrame({"T√©rmino": [], "Resultados": []})
    return df.groupby(["Fuente", "T√©rmino"], as_index=False).size().rename(columns={"size": "Resultados"})

# ------------------------------------
# Exportaci√≥n
# ------------------------------------
def to_csv_blank_nan(df: pd.DataFrame) -> bytes:
    clean = df.replace({np.nan: ""})
    return clean.to_csv(index=False).encode("utf-8-sig")

def to_xlsx_with_highlight(df: pd.DataFrame, bitacora: pd.DataFrame,
                           excluir: list[str], col1: str, col2: str) -> bytes:
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df_out = df.replace({np.nan: ""})
        df_out.to_excel(writer, sheet_name="Resultados", index=False)
        if not bitacora.empty:
            bitacora.to_excel(writer, sheet_name="Bit√°cora", index=False)

        wb  = writer.book
        ws  = writer.sheets["Resultados"]
        fmt_yellow = wb.add_format({"bg_color": "#FFF59D"})
        fmt_header = wb.add_format({"bold": True})

        # Encabezados en negrita
        for col_idx, col_name in enumerate(df_out.columns):
            ws.write(0, col_idx, col_name, fmt_header)

        # Resaltar exclusiones en col1/col2
        excl_norm = [normalize_text(e) for e in excluir]
        if excl_norm and col1 in df_out.columns and col2 in df_out.columns:
            col1_idx = df_out.columns.get_loc(col1)
            col2_idx = df_out.columns.get_loc(col2)
            for r in range(len(df_out)):
                t1 = normalize_text(str(df_out.iat[r, col1_idx]))
                t2 = normalize_text(str(df_out.iat[r, col2_idx]))
                if any(e in t1 for e in excl_norm):
                    ws.write(r + 1, col1_idx, df_out.iat[r, col1_idx], fmt_yellow)
                if any(e in t2 for e in excl_norm):
                    ws.write(r + 1, col2_idx, df_out.iat[r, col2_idx], fmt_yellow)

    return output.getvalue()

# ------------------------------------
# UI ‚Äì Encabezado
# ------------------------------------
col_logo, col_title = st.columns([0.27, 0.73])
with col_logo:
    # Mostramos el logo ‚Äúoscuro‚Äù por defecto; si usas selector de tema, no borres estado.
    st.image(DARK_LOGO, use_container_width=True)
with col_title:
    st.markdown(
        "## Herramienta para la elaboraci√≥n de bibliograf√≠as especializadas"
    )

st.info(
    "‚Ä¢ **Objetivo:** autogesti√≥n por programa/asignatura/tema y **resaltado de t√©rminos a excluir** para depuraci√≥n manual.\n"
    "‚Ä¢ Usa siempre las bases oficiales (Digital/F√≠sica) o s√∫belas **manualmente** en la barra lateral.\n"
    "‚Ä¢ Plantillas: [Tem√°ticas](https://biblioteca.unbosque.edu.co/sites/default/files/Formatos-Biblioteca/Plantilla%20Tem%C3%A1ticas.xlsx) "
    "y [T√©rminos a excluir](https://biblioteca.unbosque.edu.co/sites/default/files/Formatos-Biblioteca/Plantilla%20T%C3%A9rminos%20a%20excluir.xlsx).\n"
    "‚Ä¢ Los archivos adjuntos **no se almacenan** por la Universidad y se eliminan al cerrar la app.\n"
    "‚Ä¢ El proceso puede tardar algunos minutos; puedes seguir usando tu equipo (no cierres el navegador)."
)

# ------------------------------------
# Barra lateral
# ------------------------------------
st.sidebar.markdown("### Plantillas oficiales:")
st.sidebar.markdown(
    "- [Tem√°ticas](https://biblioteca.unbosque.edu.co/sites/default/files/Formatos-Biblioteca/Plantilla%20Tem%C3%A1ticas.xlsx)\n"
    "- [T√©rminos a excluir](https://biblioteca.unbosque.edu.co/sites/default/files/Formatos-Biblioteca/Plantilla%20T%C3%A9rminos%20a%20excluir.xlsx)"
)

st.sidebar.markdown("### Archivos auxiliares (obligatorios)")
tematicas_file = st.sidebar.file_uploader(
    "Tem√°ticas (.xlsx, col1=t√©rmino, col2=normalizado)", type=["xlsx"], key="uploader_tematicas"
)
excluir_file = st.sidebar.file_uploader(
    "T√©rminos a excluir (.xlsx, 1ra columna)", type=["xlsx"], key="uploader_excluir"
)
if tematicas_file is not None:
    st.session_state["tematicas_file"] = tematicas_file
if excluir_file is not None:
    st.session_state["excluir_file"] = excluir_file

with st.sidebar.expander("‚öôÔ∏è Avanzado: subir bases Digital/F√≠sica manualmente", expanded=False):
    st.caption(
        "Si subes aqu√≠, se usan **estos archivos** en lugar de las bases oficiales (solo en esta sesi√≥n)."
    )
    manual_digital = st.file_uploader("Base **Digital** (.xlsx)", type=["xlsx"], key="manual_dig")
    manual_fisica  = st.file_uploader("Base **F√≠sica** (.xlsx)", type=["xlsx"], key="manual_fis")

    if manual_digital is not None:
        try:
            df_dig_manual = pd.read_excel(manual_digital)
            st.session_state["df_digital"] = df_dig_manual
            st.session_state["digital_loaded_from"] = "manual"
            st.success("Base **Digital** cargada manualmente y lista.")
        except Exception as e:
            st.error(f"No se pudo leer la base Digital: {e}")

    if manual_fisica is not None:
        try:
            df_fis_manual = pd.read_excel(manual_fisica)
            st.session_state["df_fisica"] = df_fis_manual
            st.session_state["fisica_loaded_from"] = "manual"
            st.success("Base **F√≠sica** cargada manualmente y lista.")
        except Exception as e:
            st.error(f"No se pudo leer la base F√≠sica: {e}")

if st.session_state.get("digital_loaded_from") == "manual" or st.session_state.get("fisica_loaded_from") == "manual":
    st.sidebar.warning(
        "Est√°s usando **bases cargadas manualmente**. La versi√≥n no est√° garantizada como la m√°s reciente. "
        "Los archivos NO se almacenan por la Universidad y se eliminan al cerrar esta app."
    )
else:
    st.sidebar.info(
        "Por defecto se usan las **bases oficiales** descargadas autom√°ticamente. "
        "Puedes subir manualmente una base en el panel *Avanzado* si lo necesitas."
    )

# ------------------------------------
# Descarga autom√°tica (si no hay manual)
# ------------------------------------
st.write("")  # separador
box = st.container()
with box:
    st.markdown("#### üóÉÔ∏è Bases oficiales cargadas en memoria (sesi√≥n)")
    dig_bar = st.empty()
    fis_bar = st.empty()

if st.session_state["df_digital"] is None and st.session_state.get("digital_loaded_from") != "manual":
    st.info("Cargando las bases **Digital** y **F√≠sica** desde la web oficial‚Ä¶ "
            "Puedes subir *Tem√°ticas* y *T√©rminos a excluir* mientras tanto. No cierres esta ventana.")
    df_dig = safe_progress_download("Base Digital", URL_DIGITAL)
    if df_dig is not None:
        st.session_state["df_digital"] = df_dig
        st.session_state["digital_loaded_from"] = "web"

if st.session_state["df_fisica"] is None and st.session_state.get("fisica_loaded_from") != "manual":
    df_fis = safe_progress_download("Base F√≠sica", URL_FISICA)
    if df_fis is not None:
        st.session_state["df_fisica"] = df_fis
        st.session_state["fisica_loaded_from"] = "web"

# Indicadores verdes
with box:
    colA, colB = st.columns([1, 1])
    with colA:
        if st.session_state["df_digital"] is not None:
            st.success("‚úÖ Digital cargada (100%)")
        else:
            st.warning("Digital: pendiente")
    with colB:
        if st.session_state["df_fisica"] is not None:
            st.success("‚úÖ F√≠sica cargada (100%)")
        else:
            st.warning("F√≠sica: pendiente")

# ------------------------------------
# Configuraci√≥n de b√∫squeda
# ------------------------------------
st.markdown("### Configuraci√≥n de b√∫squeda y duplicados")
col1, col2, col3, col4 = st.columns([1.2, 1.2, 1.4, 1.4])

# Columnas sugeridas (pueden variar seg√∫n tus bases)
default_col_titulo = "T√≠tulo"
default_col_tema   = "Tem√°ticas"

with col1:
    col_busq1 = st.selectbox("B√∫squeda principal por:", options=[default_col_titulo, default_col_tema], index=0)
with col2:
    col_busq2 = st.selectbox("B√∫squeda complementaria por:", options=[default_col_titulo, default_col_tema], index=1)
with col3:
    col_dups_dig = st.selectbox("Columna de duplicados en Digital:", options=["Url OA", default_col_titulo, default_col_tema], index=0)
with col4:
    col_dups_fis = st.selectbox("Columna de duplicados en F√≠sica:", options=["No. Topogr√°fico", default_col_titulo, default_col_tema], index=0)

st.caption("Consejo: por defecto la b√∫squeda se realiza en **T√≠tulo** y **Tem√°ticas**. "
           "Puedes elegir otras dos columnas si lo necesitas.")

# ------------------------------------
# Validaci√≥n previa
# ------------------------------------
ready_bases = (st.session_state["df_digital"] is not None) and (st.session_state["df_fisica"] is not None)

tem_ok = st.session_state.get("tematicas_file") is not None
exc_ok = st.session_state.get("excluir_file") is not None

if not ready_bases:
    st.warning("Esperando la carga de las bases **Digital** y **F√≠sica**‚Ä¶")
if not tem_ok or not exc_ok:
    st.info("Por favor, sube los archivos obligatorios: **Tem√°ticas** y **T√©rminos a excluir** en la barra lateral.")

# ------------------------------------
# B√∫squeda
# ------------------------------------
st.write("")
btn_buscar = st.button("üöÄ Iniciar b√∫squeda", disabled=not (ready_bases and tem_ok and exc_ok))

if btn_buscar:
    try:
        tematicas_df = read_tematicas_file(st.session_state["tematicas_file"])
        excluir_list = read_excluir_file(st.session_state["excluir_file"])

        df_dig = st.session_state["df_digital"].copy()
        df_fis = st.session_state["df_fisica"].copy()

        # Asegurar columnas existen
        for need_col in [col_busq1, col_busq2]:
            if need_col not in df_dig.columns or need_col not in df_fis.columns:
                st.error(f"La columna **{need_col}** no existe en alguna base. Verifica encabezados.")
                st.stop()

        # Buscar
        res_dig = search_in_base(df_dig, tematicas_df, col_busq1, col_busq2, "Digital")
        res_fis = search_in_base(df_fis, tematicas_df, col_busq1, col_busq2, "F√≠sica")

        # Unir
        all_res = pd.concat([res_dig, res_fis], ignore_index=True) if not res_dig.empty or not res_fis.empty else pd.DataFrame()
        if all_res.empty:
            st.warning("No se encontraron coincidencias con los t√©rminos cargados.")
            st.stop()

        # Dedupe por columnas elegidas
        # Digital: col_dups_dig; F√≠sica: col_dups_fis ‚Üí deduplicamos separadamente
        if col_dups_dig in all_res.columns:
            mask_dig = all_res["Fuente"] == "Digital"
            all_res.loc[mask_dig, :] = all_res.loc[mask_dig, :].drop_duplicates(subset=[col_dups_dig])

        if col_dups_fis in all_res.columns:
            mask_fis = all_res["Fuente"] == "F√≠sica"
            all_res.loc[mask_fis, :] = all_res.loc[mask_fis, :].drop_duplicates(subset=[col_dups_fis])

        all_res = all_res.reset_index(drop=True)

        # Resaltado (bandera booleana)
        all_res = apply_exclusion_highlight(all_res, excluir_list, col_busq1, col_busq2)

        # Bit√°cora por t√©rmino
        bita = bitacora_por_termino(all_res)

        st.markdown("### Resultados")
        st.dataframe(all_res.head(200), use_container_width=True)

        # Descargas
        colA, colB = st.columns(2)
        with colA:
            csv_bytes = to_csv_blank_nan(all_res)
            st.download_button(
                "üìÑ Descargar CSV",
                data=csv_bytes,
                file_name="resultados.csv",
                mime="text/csv",
            )
        with colB:
            xlsx_bytes = to_xlsx_with_highlight(all_res, bita, excluir_list, col_busq1, col_busq2)
            st.download_button(
                "üìò Descargar Excel (con resaltado)",
                data=xlsx_bytes,
                file_name="resultados.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

        st.markdown("### üìã Bit√°cora (por t√©rmino)")
        if bita.empty:
            st.info("No hay bit√°cora para mostrar.")
        else:
            st.dataframe(bita, use_container_width=True)

    except Exception as e:
        st.error(f"Ocurri√≥ un error en la b√∫squeda: {e}")
